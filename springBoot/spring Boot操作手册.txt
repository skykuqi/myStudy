一.什么是微服务
	传统的项目所有功能加在一起较大,如一个商城项目,有支付功能,订单功能....
	微服务就是将其中的支付功能,订单功能,都提取为单独的项目,然后通过http网络协议来进行互通
	一个项目可以由多个小型的项目构成,这些小型的项目就是微服务,修改其中一个微服务,则不需要关心其他的微服务
	springBoot可以快速开发微服务
	spring官网:spring.io
	springBoot;
		a.简化j2ee的开发
		b.是整个spring整个技术栈的整合(可以通过springBoot整合springMVC,spring)
		c.是整个j2ee的大整个(整合Mybatis redis structs2)
二.springBoot的前置条件
	a.安装配置JDK
		JAVA_HOME jdk目录
		PATH 	%JAVA_HOME%\bin
		CLASS_PATH 	.;%JAVA_HOME%\lib	.表示当前目录
	b.安装配置maven
		MAVEN_HOME maven的根目录
		PATH	%AVEN_HOME%\bin
		修改配置文件 setting 配置本地仓库 localRepository
		在开发工具中配置maven	windows - preferences - maven ,installations /user setting
	c.spring Boot的开发工具
		eclipse 需要在Help 应用市场中搜索sts	安装springTools 
		sts软件 百度直接下载 相当于spring 和 spring Tools的整合
		Intellij IDea	可以直接智能部署
三.目录结构resources
	static 静态资源 js css 图片 音频 视频
	templates:模板文件(freemarker,thymeleaf) 默认不支持jsp
	application.properties:spring boot的一些配置文件
四.web程序
	webContent web.xml .war tomcat 	
	spring boot 可以不用配置这些
@Controller
public class HelloWordController {
    @ResponseBody
    @RequestMapping("helloword")
    public String helloWord(){
        return "hello word;hello spring boot";
    }
}
只写了这些就能运行 http://localhost:8080/helloword
不需要配置tomcat 已经内置部署了tomcat

五.配置文件的功能
	#修改端口号
	server.port=8888	修改tomcat端口号为8888
	可以在配置文件中对进行一些tomcat的配置
<description>Spring Boot Dependencies</description>
	springboot 版本的仲裁中心 将常见插件的版本都设置好了,不会冲突
	springboot将 框架设置成了一个个场景stater 以后要用哪个,只需要引入哪个场景即可,选完之后springboot就会将该场景所需要的所有依赖注入,选择了web,springboot会将web相关的所有依赖 tomcat json全部都引入了

六.@SpringBootApplication
	springboot的主配置类,启动时必要有他
包含注解
@SpringBootConfiguration:
	包含@Configuration 代表了一个配置类,表示配置类	可以代替配置文件 
	1.凡是标志了@Configuration表示该类是一个配置类,
	2.如果加了该注解,会将加了该注解@Configuration的类自动纳入spring容器(@Component)
@EnableAutoConfiguration
	可以自动配置:不需要写配置文件,springboot可以自动配置依赖于该注解
	自动配置:原则 约定优于配置
	@AutoConfigurationPackage 自动将该包放入了spring扫描器	
	可以找到@SpringBootConfiguration所在类的包,作用:就会将该包及所有子包全部纳入spring 容器
	@Import({AutoConfigurationImportSelector.class})三方引入的 三方依赖
	spring boot 启动时会根据META-INF/spring.factories找到相应的三方依赖,并将这些依赖引入本项目
	
	总结:编写项目时一般会对自己写的代码以及三方一来进行配置,但是springboot可以自动配置
	1.自己写的代码通过 @SpringBootConfiguration
	2.三方依赖 通过spring-boot-autoconfigure-2.1.4.RELEASE.jar中的spring.factories进行声明,然后开启使用@EnableAutoConfiguration
	spring-boot-autoconfigure-2.1.4.RELEASE.jar 中报告了j2ee整个体系中需要的依赖

七.如何自动装配
	通过观察HttpEncodingAutoConfiguration源码:
		@Configuration 标明此类是一个控制类	将此类纳入spring容器
		@EnableConfigurationProperties({HttpProperties.class})	HttpProperties.class 将默认编码设置为了UTF-8
        	static {
            	DEFAULT_CHARSET = StandardCharsets.UTF_8;
        	}	
	如何修改该编码:
		spring.http.encoding.charset=GBK
	@EnableConfigurationProperties 该注解给了UTF-8的默认编码,并且提供了prefix+属性名的方式供我们修改编码
	@ConditionalOnProperty(
    	prefix = "spring.http.encoding",
    	value = {"enabled"},
    	matchIfMissing = true
	)		
	当属性满足要求时,此条件成立
	即每一个XxAutoConfiguration都有很多的条件@ConditionalOnxx,当这些条件都满足时,则此配置自动生效(例如设置字符集为UTF-8),也可以通过XXXproperties文件中的prefix,属性名=value来装配
	2.全局配置文件中的key,来源于某个Properties中的prefix
	3.如何知道springboot中哪些自动装配生效?禁止了哪些自动装配
	debug=true 	在配置文件中可以设置此开启查看自动装配
	  CodecsAutoConfiguration matched:	开启了自动装配
	
	Negative matches:	表示springboot在此时并没有开启的自动装配
	-----------------
八.配置文件详解
	作用:spring boot自动配置是基于约定的(默认约定端口号,字符集),可以使用配置文件对默认的约定进行修改
	默认的全局配置文件:application.properties	创建项目时自动带有	k = v
	application.yml yml ain't myarkup language 不是一个标记文档
	
	xml 是一个标记文档 <server><port>8882</port></server> 配置端口号示例
	yml server:
		port: 8882	yml规定,:后面必须有空格 即key:空格v
		path: /a/b/c	yml通过垂直对齐指定层次关系 
	
在yml中注入学生Student Pet类属性
student:
  name: 张三
  age: 20
  sex: false
  birthday: 2019/02/12
  location: { province: 吉林 ,city: 长春,zone: 南关区}
  hobbies:
    - 足球
    - 篮球
  skills:
    - 编程
    - 金融
    - 算法
  pet:
    nickName: 旺财
    type: 哈士奇
@Component //将此java bean放入spring容器
@ConfigurationProperties(prefix = "student")
public class Student {

    @Autowired
    Student student;
    @Test
    public void contextLoads() {
        System.out.println(student.toString());
    }

在yml里默认可以不加引号,对于字符串及属性
	在双引号里转义符会生效 ,但是在单引号或者不存在引号时,不会发生转义,原样输出
第二种写法格式
#注入学生
student:
  name: 张三
  age: 20
  sex: false
  birthday: 2019/02/12
  location:
    province: 吉林1
    city: 长春1
    zone: 南关区1
#  { province: 吉林 ,city: 长春,zone: 南关区}	行内写法
  hobbies: [足球,篮球]				行内写法
#    - 足球
#    - 篮球
  skills: [编程,金融,算法]			行内写法	
#    - 编程
#    - 金融
#    - 算法
  pet:  {nickName: 旺财,type: 哈士奇}
#    nickName: 旺财
#    type: 哈士奇

出现spring boot Configuration Annotation Proessor not found in classpath的提示是在用了@ConfigurationProperties这个注解时，所以问题出现在ConfigurationProperties注解。
官方解决方案，Maven引入依赖


 <!-- @ConfigurationProperties(prefix = "student")原数据的提示依赖 -->
        <dependency>
            <groupId> org.springframework.boot </groupId>
            <artifactId> spring-boot-configuration-processor </artifactId>
            <optional> true </optional>
        </dependency>
yml中:行内写法,集合数字锁使用的是中括号[set,list,array] {map,对象类型的属性},中括号可以省略,大括号不能省略
绑定只的方法 :
	1.@ConfigurationProperties(prefix = "student")
	2.@Value
		public class Student {
    			@Value("王五")
   			 private String name;
    			@Value("33")
    			private int age;
优先级:属性文件中的优先级高,@Value低,但是可以互补(不在properties中使用age属性赋值,用@Value赋值,则可以互补)
区别:@ConfigurationProperties 批量注入 @Value单个注入

松散语法:	  pet:  {nickName: 旺财,type: 哈士奇}  等价为   pet:  {nick-name: 旺财,type: 哈士奇}
spEL(springEL):   @ConfigurationProperties 不支持	 @Value支持
    @Value("${student.name}")
    private String name;
JSR 303 校验: @ConfigurationProperties 支持	 @Value 不支持
@Validated  //开启JSR 303校验的注解	java.lang.IllegalStateException: Failed to load ApplicationContext 校验失败
public class Student {
    @Email
    @Value("1111")
    private String email;

是否支持注入复杂类型:@ConfigurationProperties 支持  @Value不支持
简单类型: 8个基本类型加String

@PropertySource() :默认会加载application.properties/application.yml文件中的资源
	@PropertySource(value = {"classpath:student.properties"})	只能加载properties 无法加载yml

九.@ImportResource
	springboot自动装配.自动配置
	spring等配置文件默认会被springboot自动配置好,如果需要自己编写spring配置文件,默认无法识别
	如果需要识别,需要@ImportResource来指定配合文件
	在@SpringBootApplication注解的主文件中加上@ImportResource

	@ImportResource(locations = {"classpath:applicationContext.xml"})
	@SpringBootApplication	如果需要识别,则需要在springboot中引入注解,但是该做法不推荐,不推荐手写spring配置文件
配置:xml配置文件,通过注解来配置
	@Configuration @Bean	写一个配置类
@Configuration //声明此类是一个配置文件
public class AppConfig {
    @Bean
    public StudentService studentService(){ //相当于id
        StudentService studentService = new StudentService();
        return studentService;  //返回值,相当于Bean中的class
    }
}

等价于依赖注入
 StudentService studentService = new StudentService();
        StudentDao studentDao = new StudentDao();
        studentService.setStudentDao();
        return studentService;  //返回值,相当于Bean中的class

十.spring boot 全局配置文件中的占位符表达式
${random.uuid} 	uuid
${random.value}	随机字符串
${random.int}	随机整型数
${random.long}		随机长整型数
${random.int(10)}	10以内的整形数
${random.int[1024,65536]}	指定随机数范围
	
相互引用	
student.user.name = 122333 	properties	
student:			yml
  name: ${student.user.name:无名}	如果值不存在,可以引用默认值shiyi 

十一.多环境的切换
	项目在开发时,测试,实施使都有不同的环境,springboot 支持多环境的切换
	a.通过properties文件切换多环境文件(默认会读取该文件application.properties)
		多个的命名方式:application-环境名.properties	需要规范取名
			application-dev.properties		开发环境	端口号8883
			application-test.properties		测试环境	端口号8884
		#修改端口号
		server.port=8080				需要注意如果将application.properties注释掉,springboot仍然会读取其他中的配置,并且
		#切换配置文件					properties中的优先级高于yml
		spring.profiles.active= dev			
	b.通过yml来设置环境
#修改端口号
server:
  port: 8883
spring:
  profiles:
    active: dev
---
server:
  port: 8884
spring:
  profiles: dev
---
server:
  port: 8885
spring:
    profiles: test

使用---作为分隔符
	c.动态切换环境
		通过运行参数指定环境
		1.通过命令行方式
			idea:编辑服务器,Override parametes中设置,语法格式相同
		2.通过命令行执行	
			java -jar helloword-0.0.1-SNAPSHOT.jar --spring.profiles.active=test
		通过jvm参数指定环境
		1.idea:编辑服务器,Environment VM	--spring.profiles.active=test							
十二.配置文件的位置
	a.项目内部的配置文件
	properties和yml中的配置,相互补充,如果冲突,则properties的优先级高
	springboot默认能够读取的 application.properties/application.yml,这两个文件可以存在一以下四个地方:
	file:项目根目录/config
	file:项目根目录
	classpath:项目根目录/config	
	classpath:项目根目录		默认的情况
	如果某项配置冲突则优先级有上到下 如果不冲突则互补,可以结合使用
	配置项目名称:	server.servlet.context-path=/boot
	b.项目外部的配置文件	(用于补救,大面积的配置需要修改)
	1.idea:编辑服务器,Environment 	program argument
	--spring.config.location=F:\idea_workspace\application.properties
	优先级:外部配置会覆盖掉内部配置
	2.通过命令行调用外部配置文件
	java -jar helloword-0.0.1-SNAPSHOT.jar --spring.config.location=application.properties
	3.项目运行参数 (用于补救,某一个参数的修改)
	--server.port=8889 --xxx
	优先级:命令参数(调用外部配置文件,直接运行命令行参数)>内部文件(properties>yml)

十三.springboot对日志的支持
	日志框架 UCL 	JUL JBOSS-logging,logback,log4j,log4j2,slf4j....
springboot默认选用	slf4j,logack
	所在位置:	pom 文件
springboot默认帮我们配置好了日志,可以只接使用:
日志级别
    TRACE,	跟踪
    DEBUG,	调试
    INFO,	打印,信息
    WARN,	警告
    ERROR,	错误
    FATAL,	致命的
    OFF;	关闭
默认打印级别info
#设置日志级别(主配置文件所在的包)
logging.level.com.sky.helloword=warn
则只打印warn 即warn之后级别的日志信息

#指定日志输出路径
logging.file=springboot.log
输出路径所使用的是相对路径,在项目的根目录下
也可以直接指定绝对路径
logging.file=F:/springboot.log		
也可以使用此方式指定文件加路径
logging.path=F:/log/,并且默认的文件名是springboot

修改日志的格式,要指定日志格式需要分两种情况
a.日志显示在console中
#配置控制台输出的日志格式	logging.pattern.console
logging.pattern.console=%d{yyyy-MM-dd} [%thread] %-5level %logger{50} - %msg%n
%d	日期时间{yyyy-MM-dd}时间格式
%thread	县城名
%-5level 显示日志级别	-5表示从左显示5个字符宽度
%logger{50}	规定日志显示日志长度为50
%logger{50}	日志的消息
%n		回车
b.在文件中设置日志输出格式	logging.pattern.file
格式完全相同
原始格式的定义:	base.xml中
	<include resource="org/springframework/boot/logging/logback/defaults.xml" />	可以在该路径下查看
其他日志的使用可以查看官方文档

十四.springboot开发web项目(静态资源 html css js)
	有时候可能无法自动装配controller,解决的办法:
	在主类中使用@ComponentScan(basePackages = "com.sky.controller")引入controller所在的包
springboot中的web项目默认的打包心形式也是jar,因此静态资源不在继续放在webapp中
存放位置:
	创建项目时自动装配了web,查看WebMvcAutoConfiguration类
	该类指定存放路径为addResourceHandlers该方法指定:webjars中存放
	以前引入js等静态资源是将这些资源手动下载并且放入webapp目录中,而springboot将这些静态资源直接以jar(maven)文件的形式引入项目
例如在webjars官网中使用maven依赖引入jquery,如何使用jquery:
	查看jquery.jar可以看到存在jquery.js文件,如何引用:由resources的下一即目录开始引入
	例如:http://localhost:8080/webjars/jquery/3.4.0/jquery.js
自己写的静态资源:
	a.同上将自己写的代码按格式打包成JAR包(不推荐)
	b.推荐:spring boot 将一些目录结构设置为静态资源存放目录,直接放入这些目录即可	getStaticLocations()中指定
	目录所在位置:"classpath:/META-INF/resources/", "classpath:/resources/", "classpath:/static/", "classpath:/public/"	
	classpath 表示类路径	
如何访问自己定义的静态资源:
	不需要前缀,直接写出文件名就可以访问 http://localhost:8080/hello.html	
	优先级: resources > static

如何创建欢迎页:
	设置欢迎页，查看源码:WelcomePageHandlerMapping类中定义 为index.html,任意一个静态资源目录中的index.html文件就是欢迎页

自定义网站logo 网站中的logo标签是固定名: favicon.ico	存放在静态资源目录中,任何一个静态资源目录

总结:通过源码发现静态资源的目录,要使用静态资源,只需要将静态资源放入以上目录即可
	其他特定的文件只需要根据约定放入该目录即可

自定义静态资源目录:码:WelcomePageHandlerMapping中查看源码可知
@ConfigurationProperties(
    prefix = "spring.resources",	staticLocations
    ignoreUnknownFields = false
)
spring.resources.static-locations=classpath:/res/		一旦自定义目录以后,约定的目录就将失效

十五:动态资源
	JSP(springboot默认不支持jsp,推荐使用模板引擎)
	模板引擎:thymeleaf	
	模板之中只存放模板:例如	
	<div>
		<h1>${user}</h1>
	</div>
	数据:
	mode.setAttribute("user",zs);
	//mode.setAttribute("user","zs");
	最终显示效果
	<div>
		<h1>zs</h1>
	</div>
	即将网页拆分成模板+数据
	引入thymeleaf的依赖

十六.thymeleaf的使用
	thymeleaf位置:静态资源中	源码ThymeleafAutoConfiguration	ThymeleafProperties.class
    public static final String DEFAULT_PREFIX = "classpath:/templates/";
    public static final String DEFAULT_SUFFIX = ".html";

<p th:text="${welcome}">Welcome to thymleaf!</p>
先显示thymeleaf中定义的值,如果不存在,则使用原先html中所使用的值
  <p th:text="${welcome}" id="pid" class="pclass" th:id="${pid}" th:class="${pid}">Welcome to thymleaf!</p>	可以替换原有的值
th就是替换原有的值:
	a.html属性	<p th:text="${welcome}">Welcome to thymleaf!</p>
	b.参见PDF 第十章 attribut 
		th:text	获取文本值(不转义) 当写入的是<h1>hello</h1>时不会转义渲染
		th:utext 获取文本值 	当写入的是<h1>hello</h1>时会转义渲染
	符号
	th:text="${welcome}",除了$以外 查看第四章

	循环:
	th:each

十七.springb整合JSP开发
	之前springboo 默认 自带内置的tomcat,不需要war包,可以直接通过jar包执行
	但是,如果要整合jsp开发,就要单独配置一个外置的tomcat
	1.新建项目,打包的方式需要修改为war
	2.建立基本的web项目所需要的目录结构
		webapps/WEB-INF/web.xml(不需要)	springboot是自动配置的
	3.创建tomcat实例,部署项目
	
	war包会多生产一个ServletInitializer.java 为servlet启动的主配置类,启动时会调用该配置中的configure,configure方法调用@SpringBootApplication的主配置类
	




	








	
			


