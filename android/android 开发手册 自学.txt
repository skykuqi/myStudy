一.android开发概述
	Android是Google开发的移动端操作系统
	Android	iOS	H5 APP	Native+H5(原生和H5的混合)		RN	ionic	MUI(跨平台)
二.完整项目的最精简流程
	Android--网络接口--数据库--返回数据到接口---客户端展示
	实际开发的过程中,分工较为明确	
三.开发工具
	Android	Studio	(不再使用eclipse) Google已经停止了对eclipse的支持
	环境JDK.SDK
	为什么使用Android studio 是Google自己推出的Android开发工具 可以根据gradle开发项目
四.第一个Android应用的开发
	目录结构	app.src.main.java	java文件
	app.src.main.res	依赖文件
		drawable	可以防放置图片文件	自定义xml文件
		layout		布局文件	activity的布局文件
		mipmap-hdpi	启动图片logo
		values		颜色	文字
	AndroidManifest.xml	应用里所使用的activity都需要在manifest中注册声明
	build.gradle		所依赖的文件声明	版本号的修改
五.布局管理器
	线性布局(linearLayout):
		最常用的属性:	id		标识,可通过id寻找该空间
				layout_margin	
				layout_width	宽度
				layout_height	高度
				background	背景	颜色	图片	自定义的xml文件
				layout_margin	外边距
				layout_padding	内边距
				orientation	设置方向	横竖?
			
	相对布局(RelativeLayout):
				layout_toLeftOf	在xxx的左边
				layout_toRightOf在xxx的右边
				layout_alignBottom	底部对其
				layout_alignPartenBottom	父空间底部对其
				layout_below 	在xxx的下边
六.TextView组件
	文字大小.颜色:
	显示:
	文字+icon:

   	<TextView   android:id="@+id/tv_3"
        android:layout_width="200dp"
        android:maxLines="1"
        android:ellipsize="end"
        android:layout_height="wrap_content"
        android:text="筛选"
        android:drawableRight="@drawable/select"
        android:drawablePadding="5dp"
        android:textColor="#000000"
        android:textSize="30sp"
        android:layout_marginTop="20dp"
	中划线,下划线:
   <TextView   android:id="@+id/tv_5"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="这是第五个测试"
        android:textColor="#000000"
        android:textSize="30sp"
        android:layout_marginTop="20dp"
        />
    <!--可以通过html代码来显示-->
    <TextView   android:id="@+id/tv_6"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:textColor="#000000"
        android:textSize="30sp"
        android:layout_marginTop="20dp"
        />

	textView6 = findViewById(R.id.tv_6);
//      textView6.setText("这是第六的测试");
        textView6.setText(Html.fromHtml("<u>这是第六个测试</u>"));
	跑马灯:
  	<TextView   android:id="@+id/tv_7"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="这是第七个测试这是第七个测试这是第七个测试这是第七个测试这是第七个测试这是第七个测试这是第七个测试"
        android:singleLine="true"
        android:textColor="#000000"
        android:textSize="30sp"
        android:layout_marginTop="20dp"
        android:ellipsize="marquee"
        android:marqueeRepeatLimit="marquee_forever"
        android:focusable="true"
        android:focusableInTouchMode="true"

七.Button
	文字大小,颜色
	自定义背景形状:
   	<Button android:id="@+id/btn_1"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="按钮1"
        android:textSize="30sp"
        android:textColor="#FF0000"
        android:background="#DDA0DD"
        />
	自定义按压效果
	点击事件
	button_1.setOnClickListener(new View.OnClickListener(){
            @Override
            public void onClick(View v) {
                Intent intent = new Intent(MainActivity.this,ButtonActivity.class);
                startActivity(intent);
            }
        });
	textAllCaps	可以取消默认的大写效果

八.EditText TextView Button的特性在EditText中同样适用
	可以输入的一个控件
常用的属性:	和Button TextView 大致相同

监听事件:	edit_account = findViewById(R.id.edit_account);
        edit_account.addTextChangedListener(new TextWatcher() {

制作登录界面:	参考 Android Work1

九.Radioutton
修改代码结构:每一次写Onclick事件都需要实现接口,可以创建一个内部类,实现View.OnClickListener,并在主类中设置一个监听器方法,在内部启动点击事件
private void setListeners(){
        Onclick onclick = new Onclick();
        index_button_radiobutton.setOnClickListener(onclick);
    }
    private class Onclick implements View.OnClickListener{
        Intent intent = null;
        @Override
        public void onClick(View v) {
            switch (v.getId()){
                case R.id.index_button_radiobutton:
                    intent = new Intent(IndexActivity.this,RadioButtonActivity.class);
                    break;
            }
            startActivity(intent);
        }
    }

	
常用属性:
	结合RadioGroup来使用实现分组	
自定义样式:
	 <!-- android:checked="true" 默认选中状态
        一旦加入这个属性,必须给每个button设置id,不然会失效

        android:button="@null"会使其失效-->
监听事件:
	radio_group_city.setOnCheckedChangeListener(new RadioGroup.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(RadioGroup group, int checkedId) {
                RadioButton radioButton = group.findViewById(checkedId);
                String radioText = radioButton.getText().toString();
                Toast.makeText(RadioButtonActivity.this,radioText,Toast.LENGTH_SHORT).show();
            }
        });

十.复选框	CheckBoxs
常用属性:	与其他相同
自定义样式:
 <CheckBox
            android:id="@+id/checkbox_check_hobby_2"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="5dp"
            android:button="@drawable/check_box_selector"
            android:text="运动"
            android:paddingLeft="15dp"
            android:textSize="25sp" />
监听事件:类似

十一.图片空间 	ImageView
其他衍生控件	ToggleButton Switch
常用属性:
 <!--android:src="@drawable/ImageView"   设置选择图片
    android:scaleType="fitXY"   设置图片铺满方式 fitXY充满,图片有可能会拉伸
    fitCenter       保持宽高比,直至能够完全显示
    centerCrop  保持宽高比缩放,直至完全覆盖空间,裁剪显示
    -->
加载网络图片:
	依赖于第三方库:gidle	
	下载添加方式:
	1.maven 下载
	2.通过gradle 构建
repositories {
    mavenCentral()
    google()
}

//引用 Glide
    annotationProcessor 'com.github.bumptech.glide:compiler:4.9.0'
    implementation 'org.jetbrains:annotations-java5:15.0'

 java.lang.SecurityException: Permission denied (missing INTERNET permission?)	没有网络请求权限
AndroidManifest.xml	中声明权限
	<uses-permission android:name="android.permission.INTERNET"/>	网路权限

十二.列表视图 ListView
在实际开发中已经被RecyclerVew代替
	手动创建ativity:
	1.创建activity其父类为AppCompatActivity
	2.重写onCreate方法
 @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_listview);
    }
	3.在AndroidManifest.xml中声明
	<activity android:name="com.sky.myapplication.listview.ListViewActivity"/>

常用属性:
  <!--android:listSelector="@drawable/list_item_selector" 设置选中时的效果
    android:divider=""  边框颜色样式
    android:dividerHeight=""    高度
    -->
Adapter接口:
创建一个类,其父类为 android.widget.BaseAdapter
	实现构造器
private Context context;        //为引用该类的Actiyity本身
    private LayoutInflater layoutInflater;
    public MyListAdapter(Context context) {
        this.context = context;
        this.layoutInflater = LayoutInflater.from(context);
    }
	@Override
    public int getCount() { //列表的长度,实际开发并不是给出固定值
        return 10;
    }
	@Override
    public View getView(int position, View convertView, ViewGroup parent) {
        ViewHolder holder = null;
        if(convertView == null){
            convertView = layoutInflater.inflate(R.layout.layout_list_item,null);
            holder = new ViewHolder();
            holder.layout_list_image = convertView.findViewById(R.id.layout_list_image);
            holder.layout_list_line_text_1 = convertView.findViewById(R.id.layout_list_line_text_1);
            holder.layout_list_line_text_2 = convertView.findViewById(R.id.layout_list_line_text_2);
            holder.layout_list_line_text_3 = convertView.findViewById(R.id.layout_list_line_text_3);
            convertView.setTag(holder);
        }else {
            holder = (ViewHolder) convertView.getTag();
        }
        //给控件赋值
        holder.layout_list_line_text_1.setText("这是标题");
        holder.layout_list_line_text_2.setText("2019-4-26");
        holder.layout_list_line_text_3.setText("随便说一遍什么吧");
        Glide.with(context).load("https://img.zcool.cn/community/01f5005bbe34c9a8012099c8ce25ac.png@2o.png").into(holder.layout_list_image);
        return convertView;
    }

十三.网格视图	GridView
常用属性:
 <!--android:numColumns="3"  一行的列数
    android:horizontalSpacing="10dp"    水平间距
    android:verticalSpacing="10dp"      垂直间距-->

Adapter接口:
**
 * @author 施 凯 沅
 * @version 0.0.1
 */
public class MyGridViewAdapter extends BaseAdapter {
    Context context;
    LayoutInflater layoutInflater;

    public MyGridViewAdapter(Context context) {
        this.context = context;
        this.layoutInflater = LayoutInflater.from(context);
    }

    @Override
    public int getCount() {
        return 10;
    }

    @Override
    public Object getItem(int position) {
        return null;
    }

    @Override
    public long getItemId(int position) {
        return 0;
    }

    static class ViewHolder {
        public ImageView layout_grid_image;
        public TextView layout_grid_text;
    }

    @Override
    public View getView(int position, View convertView, ViewGroup parent) {
        ViewHolder holder = null;
        if (convertView == null) {
            convertView = layoutInflater.inflate(R.layout.layout_grid_item,null);
            holder = new ViewHolder();
            holder.layout_grid_image = convertView.findViewById(R.id.layout_grid_image);
            holder.layout_grid_text = convertView.findViewById(R.id.layout_grid_text);
            convertView.setTag(holder);
        }else {
           holder = (ViewHolder) convertView.getTag();

        }
        //赋值
        holder.layout_grid_text.setText("花");
        Glide.with(context).load("https://gss0.bdstatic.com/94o3dSag_xI4khGkpoWK1HF6hhy/baike/c0%3Dbaike116%2C5%2C5%2C116%2C38/sign=0da5402e49166d222c7a1dc6274a6292/242dd42a2834349b5b65a960c3ea15ce37d3bef0.jpg").into(holder.layout_grid_image);
        return convertView;
    }
}

十四.滚动布局	ScrollView 垂直方向滚动		HorizontalScrollView 水平方向滚动
当内容过长,无法全部查看 ,则可以外套该控件
只能有一级一个子元素,可以用其他布局包裹例如ScrollView中含有LinearLayout

十五.RecyclerView	Linear列表功能	垂直滚动
2014年推出的新控件:用于展示大数据集,视图的复用管理比ListView更好,能够显示列表,网格瀑布流等形式,且不同的ViewHolder能够实现item多元化的功能.
    implementation 'com.android.support:recyclerviewv7:28.0.0-alpha1'

recycler_line_recucleview.addItemDecoration();
onDraw	在Item未绘制之前添加
onDrawOver 在Item绘制完成之后再添加
getItemOffSets	在周边绘制

十六.RecyclerView	Lnear列表功能	水平滚动	GridView 网格布局
1.需要声明manager
recycler_grid_recyclerview.setLayoutManager(new GridLayoutManager(RecyclerGridActivity.this,3));
2.引用adapter
 recycler_grid_recyclerview.setAdapter(new RecyclerGridAdapter(RecyclerGridActivity.this, new RecyclerGridAdapter.OnClickListener() {
            @Override
            public void onClick(int pos) {
                Toast.makeText(RecyclerGridActivity.this,"点击了..." + pos,Toast.LENGTH_SHORT).show();
            }
        }));
由于本身没有点击事件,需要以回调接口的方式在activity中实现点击事件

3.adapter	需要继承基类	RecyclerView.Adapter<T>
a. 在adapter类中声明 泛型,并将控件进行赋值
class GridViewHolder extends RecyclerView.ViewHolder {
        private TextView layout_recycler_grid_text;

        public GridViewHolder(@NonNull View itemView) {
            super(itemView);
            layout_recycler_grid_text = itemView.findViewById(R.id.layout_recycler_grid_text);
        }
    }
b.重新方法onCreateViewHolder	返回Activity对layout布局的引用
 return new GridViewHolder(LayoutInflater.from(context).inflate(R.layout.layout_recycler_grid_item,parent,false));
d.重写onBindViewHolder 
	对内容控件进行赋值
holder.layout_recycler_grid_text.setText("网格视图");
        holder.layout_recycler_grid_text.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                onClickListener.onClick(position);
            }
        });
e.重写getItemCount	声明产生的网格的数量
  
f.构造方法的声明
	如果需要实现点击效果,那么需要自定义接口
public interface OnClickListener {
        void onClick(int pos);
    }
 private Context context;
    private OnClickListener onClickListener;

    public RecyclerGridAdapter(Context context, OnClickListener onClickListener) {
        this.context = context;
        this.onClickListener = onClickListener;
    }

十七.瀑布流效果的实现	
StaggeredGridLayoutManager(数量,Context)
添加边框
1.在Activiy中重写 RecyclerView.ItemDecoration类
class MyDecoration extends RecyclerView.ItemDecoration{
        @Override
        public void getItemOffsets(Rect outRect, View view, RecyclerView parent, RecyclerView.State state) {
            super.getItemOffsets(outRect, view, parent, state);
            outRect.set(0,0,getResources().getDimensionPixelOffset(R.dimen.recycler_linear_dividerHeight),getResources().getDimensionPixelOffset(R.dimen.recycler_linear_dividerHeight));
        }
    }
2.声明调用
recycler_falls_recyclerview.addItemDecoration(new MyDecoration());

十七.
a.RecyclerView不同的ViewHolder展示不同的样子
1.重写getItemViewType
  @Override
    public int getItemViewType(int position) {
        if (position % 2 == 0) {
            return 0;
        }else{
            return 1;
        }
    }
2.定义更多的ViewHolder
class LinearViewHolder1 extends RecyclerView.ViewHolder {
        private TextView layout_linear_1_text;
        private ImageView layout_linear_1_image;
        public LinearViewHolder1(@NonNull View itemView) {
            super(itemView);
            layout_linear_1_text = itemView.findViewById(R.id.layout_linear_1_text);
            layout_linear_1_image = itemView.findViewById(R.id.layout_linear_1_image);
        }
    }
3.将泛型修改为基类泛型
4.onCreateViewHolder中需要判断返回类型
 if (viewType == 0){
            return new LinearViewHolder(LayoutInflater.from(context).inflate(
                    R.layout.layout_linear_item, parent, false));
        }else {
            return new LinearViewHolder1(LayoutInflater.from(context).inflate(
                    R.layout.layout_linear_item_1, parent, false));
        }
5.onBindViewHolder也需要判断类型,同时强转
  public void onBindViewHolder(@NonNull RecyclerView.ViewHolder holder, final int position) {
        if(getItemViewType(position) == 0){
            ((LinearViewHolder)holder).layout_linear_text.setText("Hello World!");
            ((LinearViewHolder)holder).layout_linear_text.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    listener.onClick(position);
                }
            });

        }else {
            ((LinearViewHolder1)holder).layout_linear_1_text.setText("Hello Second!");
        }
        holder.itemView.setOnLongClickListener(new View.OnLongClickListener() {
            @Override
            public boolean onLongClick(View v) {
                return listenerLong.onLongClick(position);
            }
        });

    }


b.XRecyclerView:addHeadView,addFootView,下拉刷新,上拉加载	GitHub中可以查看


十八.WebView 
a.加载URL	网络或者本地assets文件夹下的html文件

web_view_webview.loadUrl("file:////android_asset/web/index.html");

//        加载本地html
//        web_view_webview.loadUrl("file:////android_asset/web/index.html");
//        加载网络html  由于默认不提供js支持,无法打开
        web_view_webview.getSettings().setJavaScriptEnabled(true);
        //使用app打开网页
        web_view_webview.setWebViewClient(new WebViewClient());
        web_view_webview.loadUrl("http://m.baidu.com");

b.加载html代码
webview.loadData();			有时候可能会出现乱码等可能的情况
webview.loadDataWithBaseUrl();		编码更好
c.Native和JavaScript相互调用

d.网页的前进后退
webview.canGoBack();
webvew.goBack();
webview.canGoForward();
webview.goForward();
webview.canGoBackOrForward(int steps)	+2向前前进两步	-2向后退几步

e.按下返回键,默认是退出当前Actvity,如果希望是WebView内页面后退
重写onKeyDown方法
 @Override
    public boolean onKeyDown(int keyCode, KeyEvent event) {
        if(keyCode == KeyEvent.KEYCODE_BACK && web_view_webview.canGoBack()){
            web_view_webview.goBack();
            return true;
        }
        return super.onKeyDown(keyCode, event);
    }

十九.UI组件之弹出组件
a.Toast		默认弹出位置,屏幕下方
1.Toast.makeText(RegisterActivity.this,"验证码已发送",Toast.LENGTH_SHORT).show();
2.设置显示的位置
 Toast toastCenter = Toast.makeText(getApplicationContext(),"改变位置-居中",Toast.LENGTH_SHORT);
                    toastCenter.setGravity(Gravity.CENTER,0,0);
                    toastCenter.show();
3.自定义显示的内容
 Toast myToast = new Toast(getApplicationContext());
                    LayoutInflater inflater = LayoutInflater.from(ToastActivity.this);
                    View view = inflater.inflate(R.layout.layout_toast, null);
                    ImageView layout_toast_image = view.findViewById(R.id.layout_toast_image);
                    TextView layout_toast_text = view.findViewById(R.id.layout_toast_text);
                    layout_toast_image.setImageResource(R.drawable.check_on);
                    layout_toast_text.setText("自定义Toaast");
                    myToast.setView(view);
                    myToast.show();
有时候layout中定义的大小可能无法生效,需要在layout的父空间布局中再定义一个子空间,在子空间中存放控件

点击时候Toast会排队显示,当前一个显示完毕以后,下一个才会接着显示,修改为覆盖显示,可以封装一个简单的类

5.简单封装
public static Toast myToast;
    public static void showToast(Context context,String message,int toastTime){
        if(myToast == null){
            myToast = Toast.makeText(context,message,toastTime);
        }else {
            myToast.setText(message);
        }
        myToast.show();
    }

二十.AlertDialog	警示对话框
在界面上弹出窗口进行选择
选择V7包的AlertDialog
a.默认样式
setTitle	设置标题
setMessage	设置内容
setIcon		设置标题图片
setPositiveButton	积极按钮
setNeutralButton	中性按钮
setNegativeButton	消极按钮


b.单选样式
  AlertDialog.Builder builder2 = new AlertDialog.Builder(AlertDialogActivity.this);
                    final String[] sex = {"男","女"};
                    builder2.setTitle("选择性别").setItems(sex, new DialogInterface.OnClickListener() {
                        @Override	//which为数组索引
                        public void onClick(DialogInterface dialog, int which) {
                            ToastUtil.showToast(AlertDialogActivity.this,"你选择了: " + sex[which],Toast.LENGTH_SHORT);
                        }
                    }).show();
                    break;
 builder3.setSingleChoiceItems(sex3, 0, new DialogInterface.OnClickListener() {		单选按钮类型的样式
默认状态	点击外部,选择框就消失了:
setCancelable(false) 可以解决	并在 onclick 方法中调用dialog.dismiss();
c.多选样式
setMultiChoiceItems
   final String[] hobby = {"唱歌","跳舞","写代码"};       //可以选择的兴趣爱好选项
                    final boolean[] hobbyChoice = {false,false,true};            //默认的选择结果
                    AlertDialog.Builder builder4 = new AlertDialog.Builder(AlertDialogActivity.this);
                    builder4.setTitle("选择兴趣").setMultiChoiceItems(hobby, hobbyChoice, new DialogInterface.OnMultiChoiceClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which, boolean isChecked) {


d.自定义样式
 final AlertDialog dialog = builder5.setTitle("请先登录").setView(inflate).show();
 dialog.dismiss();		取消弹窗效果
final View inflate = LayoutInflater.from(AlertDialogActivity.this).inflate(R.layout.layout_alert_dialog_myalert,null,false);
引用自定义视图文件

二十一.ProgressBar && ProgressDialog
ProgressBar 进度加载的过程
1.基本属性	
<!-- android:visibility="visible"       设置可见状态-->

  <!--style="@style/Widget.AppCompat.ProgressBar.Horizontal"  设置风格
        有明确状态的进度条
        android:max="100"       最大进度
        android:progress="25"   当前进度
        android:secondaryProgress="40"  二级进度 视频在线播放时需要
    style="@style/Base.Widget.AppCompat.ProgressBar"        默认风格
    style="@android:style/Widget.ProgressBar"               默认android:style 风格

    android:progressDrawable="" 可以自定义样式
        -->

!--style="@android:style/Widget.Material.ProgressBar.Horizontal"
    style="@style/Widget.AppCompat.ProgressBar.Horizontal"  为相同效果-->

 <!--style="@android:style/Widget.ProgressBar.Horizontal" andorid5 之前的界面效果-->
2.进度由1-100的加载
 progress_button.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                //handler 会发送消息到handleMessage方法中处理消息
                handler.sendEmptyMessage(0);
            }
        });
 @SuppressLint("HandlerLeak")
    Handler handler = new Handler(){
        @Override
        public void handleMessage(Message msg) {
            super.handleMessage(msg);
            if(progress_bar_4.getProgress() < 100){
                //延迟500毫秒执行 发送消息
                handler.postDelayed(runnable,500);
            }else {
                ToastUtil.showToast(ProgressActivity.this,"加载完成",Toast.LENGTH_SHORT);
            }
        }
    };
    Runnable runnable = new Runnable() {
        @Override
        public void run() {
            progress_bar_4.setProgress(progress_bar_4.getProgress()+5);
            //发送空消息
            handler.sendEmptyMessage(0);
        }
    };
3.自定义按钮
a.新建drawable文件 属性为animated-rotate
<?xml version="1.0" encoding="utf-8"?>
<animated-rotate xmlns:android="http://schemas.android.com/apk/res/android"
    android:drawable="@drawable/loading"
    android:pivotX="50%"
    android:pivotY="50%">
<!--android:pivotX="50%"
    android:pivotY="50%"    确定图片的旋转中心,X,Y轴的旋转中心为中间-->
</animated-rotate>
b.自定义style	直接在values 中的style文件中
 <style name="myProgressBar">
        <item name="android:indeterminateDrawable">
            @drawable/background_progress
        </item>
    </style>	


ProgressDialog		目前已经被弃用
a. progress_button_dialog_1.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                ProgressDialog progressDialog = new ProgressDialog(ProgressActivity.this);
                progressDialog.setTitle("提示");
                progressDialog.setMessage("正在加载");
                progressDialog.setOnCancelListener(new DialogInterface.OnCancelListener() {
                    @Override
                    public void onCancel(DialogInterface dialog) {
                        ToastUtil.showToast(ProgressActivity.this,"你取消了",Toast.LENGTH_SHORT);
                    }
                });
                progressDialog.show();
                //外部点击无法取消
                progressDialog.setCancelable(false);

            }
        });

b.//改变为进度条的样式
                progressDialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);

c.设置按钮 setButton方法	同样有三种类型的Button可以设置

4.自定义Dialog
a.新建Dialog类CustomDialog继承android.app.Dialog
b.layout布局新建

二十二.PopupWindow
在界面上弹出菜单等...	弹出后页面不会产生暗影效果
                //设置该属性使其点击空白区域消失
                popupWindow.setOutsideTouchable(true);
                //设置点击按钮时先消失,下一次点击时再开启
                popupWindow.setFocusable(true);

二十三.Activity详解
Fragment 是碎片化的页面,每一个Activity可以有多个Fragment
1.Activity的创建三部曲:
	a.新建一个类继承Activity或其子类AppCompatActivity...
	b.在注册文件AndroidManifest.xml中声明
	c.创建layout并在Activityzhong的onCreate中设置setContentView(特殊情况下可以不设置布局)
2.AndroidManifest.xml的使用
<activity android:name=".PopupWindowActivity" />	方式在该注册文件中声明activity
android:label="登录界面"	设置页面标题
android:theme="@style/Theme.AppCompat.NoActionBar"	设置主题类型 不存在页面头标题	application 中也可以设置此类属性 则为全局
android:screenOrientation="portrait"			竖屏显示	即使把手机横放也不会改变
android:screenOrientation="landscape"			横屏显示	同上		默认根据手机状态显示屏幕  横放手机则为横屏显示	

 <activity android:name=".MainActivity">
            <intent-filter>	//将该Activity设置为默认启动的activity
                <action android:name="android.intent.action.MAIN" />

                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
 </activity>	
3.Activity 的生命周期
Activity 在程序运行过程中不同的状态
onCreate onStart onResume onPause(onPause - onResume) onStop(onStop - onRestart - onStart) onDestory
	a.第一次加载该Activity onCreate onStart onResume
	b.退出该页面	onPause onStop onDestory
	c.暂时退出到后台,接电话:	onPause onStop
	d.接听电话后再次回到该Activity onRestart onStart onResume

4.常用的生命周期函数
	a.onCreate 	设置布局文件..
	b.onResume	数据的刷新,每次进入页面都需要刷新
	c.onPause	退出到后台,执行某些操作:暂停电影的播放...
	d.onDestory	在Activity摧毁前执行某些操作:注销动态广播
5.Activity 之间的跳转和数据的传递-显式跳转
                //显示跳转1 最基本的跳转方法
                /*Intent intent = new Intent(ActivityExampleActivity.this, IndexActivity.class);
                startActivity(intent);*/
                //显示跳转2
                /*Intent intent = new Intent();
                intent.setClass(ActivityExampleActivity.this,IndexActivity.class);
                startActivity(intent);*/
                //显示跳转3
                /*Intent intent = new Intent();
                intent.setClassName(ActivityExampleActivity.this,
                        "com.sky.myapplication.androidword1.IndexActivity");
                startActivity(intent);*/
                //显示跳转4
                /*Intent intent = new Intent();
                intent.setComponent(new ComponentName(ActivityExampleActivity.this,
                        "com.sky.myapplication.androidword1.IndexActivity"));
                startActivity(intent);*/
6.Activity 之间的跳转和数据的传递-隐式跳转
        <activity
            android:name=".IndexActivity"
            android:label="索引页面"
            android:launchMode="singleTask">
            <intent-filter>
                              	<!--两者必须同时声明-->
                <action android:name="myGoto" />
                <category android:name="android.intent.category.DEFAULT"/>
            </intent-filter>
        </activity>


7.Activity 之间的跳转和数据的传递-Activity之间的数据传递
                case R.id.index_button_activiy:
                    intent = new Intent(IndexActivity.this, ActivityExampleActivity.class);
                    Bundle bundle = new Bundle();
                    bundle.putInt("num",666);
                    bundle.putString("hello","你好,欢迎来到本界面");
                    intent.putExtras(bundle);
                    break;

        //接收前一个Activity发送的数据
        Bundle bundle = getIntent().getExtras();
        String hello = bundle.getString("hello");
        int num = bundle.getInt("num");
        activity_example_text = findViewById(R.id.activity_example_text);
        activity_example_text.setText(hello + "  " + num);
8.Activity 之间的跳转和数据的传递-startActivityForResult:启动Activity,结束返回结果
	a.跳转页面
                Intent intent = new Intent(IndexActivity.this, ActivityExampleActivity.class);
                Bundle bundle = new Bundle();
                bundle.putInt("num",666);
                bundle.putString("hello","你好,欢迎来到本界面");
                intent.putExtras(bundle);
                //请求码用来区分请求的对象
                startActivityForResult(intent,0);
	b.返回页面
                Intent intent = new Intent();
                Bundle bundle = new Bundle();
                bundle.putString("title","正确返回");
                intent.putExtras(bundle);
                setResult(Activity.RESULT_OK,intent);
                //结束当前页面
                finish();
	c.返回页面中接收信息
		重写onActivityResult方法
    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if(resultCode == Activity.RESULT_OK){
            Bundle bundle = data.getExtras();
            String title = bundle.getString("title");
            ToastUtil.showToast(IndexActivity.this,title,Toast.LENGTH_SHORT);
        }
    }
9.Actitty 的四种启动模式
	a.启动模式的设置位置:注册文件的activity标签中android:launchMode="singleTask" 
	b. android:launchMode="singleTask"	Task栈内复用模式,对于位于该Activity前的Activity进行弹栈操作
	c. android:launchMode="singleTop"	Task栈顶复用模式,只要该Activity位于栈顶,则不回去创建新的实例,直接复用该Activity
	d. android:launchMode="singleInstance" 	全局单例默认,和其他的Activity不在同一个栈中
	e. android:launchMode="standard" 	标准模式,默认	,每启动一个Activity,就会被放入栈中,按返回键,就会从栈顶移除一个Activity

10.设置任务栈名称	在不特殊设置时,其名称则为包名,设置别名后则不属于默认的对堆栈,从该Activity引发的其他Activity则不会影响默认任务栈
	会导致安装失败
	<activity
            android:name=".ActivityExampleActivity"
            android:label="Activity示例"
            android:launchMode="singleTask"
            android:taskAffinity="myTaskAffinity"/>

二十四.Fragment详解
1.Fragment 有自己的声明周期,但是依赖于Activity,当Activity被销毁,Fragment也会被销毁
2.Fragment 通过getActivity() 可以获取所在的Activity;Activity通过FragmentManager的findFragmentById()或findFragmentByTag()获取Fragmet
3.Fragemnt 和Activity 是多对多的关系
4.Fragment的创建;
	a.自定义layout布局文件
	b.创建自定义Fragment类 ,继承android.support.v4.app.Fragment
	c.重写onCreateView方法,声明自定义布局文件
    @Nullable
    @Override
    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        //声明布局文件
        View view = inflater.inflate(R.layout.layout_fragment_a, container, false);
        return view;
    }
	d.重写onViewCreated,声明标签view
	   @Override
    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);
        layout_fragment_a_text =  view.findViewById(R.id.layout_fragment_a_text);
    }
	e.在Activity布局文件中使用Fragment
    <FrameLayout
        android:id="@+id/activity_container_fragment"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:layout_marginTop="15dp">

        <fragment
            android:layout_width="match_parent"
            android:layout_height="match_parent" />
    </FrameLayout>
	f.在Activity 中声明FragmentTransaction

5.Fragment的异常情况
	a.Fragment中getActivity()为null的问题:长期处于后台运作,将部分资源回收处理了,异步任务还为完成;横竖屏的切换导致
    //fragment 和activity绑定,在getActivity为null时也必然执行
    @Override
    public void onAttach(Context context) {
        super.onAttach(context);
    }

    //运行该方法后与宿主Activity脱离了联系
    @Override
    public void onDetach() {
        super.onDetach();
    }

	解决方法
   @Override
    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);
        if(getActivity() != null){

        }else {
            
        }
    }
    @Override
    public void onDestroy() {
        super.onDestroy();
        //取消异步
    }

	b.向Fragment传递参数 
    public static AFragment newInstance(String title){
        AFragment aFragment = new AFragment();
        Bundle bundle = new Bundle();
        bundle.putString("title",title);
        aFragment.setArguments(bundle);
        return aFragment;
    }

        //实例化Fragment
        aFragment = new AFragment().newInstance("我是重新定义的title");
        bFragment = new BFragment();

6.Fragment 回退栈
	a.FragmentTransaction transaction = getFragmentManager().beginTransaction().replace(R.id.activity_container_fragment, bFragment);
        //将Fragment添加到回退栈,点击返回时会先返回到回退栈
        transaction.addToBackStack(null);
        transaction.commit();
	b.每一次重新引用Fragmen时,视图都会被重新常见,即使是同一个实例,将其修改为显示最后的状态
	不调用replace,replace的过程为先remove,再create,
	        Fragment fragment = getFragmentManager().findFragmentByTag("a");
                if (fragment != null) {
                    getFragmentManager().beginTransaction().hide(fragment)
                            .add(R.id.activity_container_fragment, bFragment).addToBackStack(null).commit();
                } else {
                    getFragmentManager().beginTransaction().replace(R.id.activity_container_fragment, bFragment)
                            .addToBackStack(null).commit();
                }
	Tag标签可以设置在该Fragment 的父类布局当中

7.Fragment 和 Activity之间的通信
	a.在Activity中提供一个方法来修改数据,在Fragment中使用getActivity()方法来显式的调用该方法进行数据的交互,不推荐这么做
	b.在Fragment中写一个公共接口提供修改数据的方法,在Activity中实现该接口
    //fragment 和activity绑定,在getActivity为null时也必然执行
    @Override
    public void onAttach(Context context) {
        super.onAttach(context);
        try {
            iOnMessageClick = (IOnMessageClick) context;
        } catch (ClassCastException e) {
            throw new ClassCastException("Activity 必须实现 IOnMessageClick 这个接口");
        }
    }

二十五.基于监听的事件处理机制
当用户在应用界面上执行各种操作时,应用程序需要为用户的动作提供响应,这种响应的过程乘坐事件处理
1.监听三要素:
	Event Source(事件源)
	Event (事件)
	Event Listener(事件监听器)
	按钮的点击事件onClick	触摸监听器 onTouchListener
2.实现监听的方法:
	a.通过内部类实现
	b.通过匿名内部类实现
	c.通过事件源所在的类实现	Button在Ativity中让该Activity实现事件监听接口(View.OnClickListener)
	d.通过外部类实现 不常用
	e.布局文件中onClick属性(针对OnClick事件)	在Activity中提供公共方法 ,传递一个View
	
	f.get同一个事件源添加了多个监听器
		当内部类和匿名内部类都为同一个Button添加了点击事件时,只触发最后设置的点击事件,
		如果还同时在布局文件中声明了点击事件,其优先级最低,内部类>布局文件	相当于布局文件中的点击事件时最先设置的
		
二十六.基于回调的事件处理机制
1.回调机制与监听机制的区别:
	回调机制:事件源与事件的监听绑定在一起
2.基于回调的事件传播
	a.自定义按钮类,继承v7.widget.AppCompatButton	同时必须实现所有构造方法
	b.xml布局文件中声明空间也必须使用自定义的Button
	c,当自定义Button类中重写了onTouchEvent方法,在主Activity中也写了onTouchEvent方法时,回调机制会先执行自定义Button类中的回调,再执行Actvity中的onTouchEvent方法.	向外传播,reutrn false;		return true;不再向外传播
	d.若同时自定义Button中声明onTouchEvent方法,setListener使用onTouchEvent,Activity中重写onTouchEvent:监听Listener 优先于回调,同样return true后将不会再往外传播

二十七,源码剖析,了解View的事件分发
	a.自定义一个MyButton类继承v7.widget.AppConpatButton	实现所有的构造方法
	b.在MyButon类中自定义 dispatchTouchEvent onTouchEvent
	c.在Activity中声明按钮,然后对该按钮赋予一个setOnTouchListener,实现OnTouchListener
	d.对按钮再添加一个setOnClickListener,实现onClick
	e.点击该按钮发现调用结果如下:dispatchTouchEvent setOnTouchListener onTou chEvent dispatchTouchEvent setOnTouchListener onClick
	f.可知onclick 等事件源自onTouchEvent的处理

二十八.Handler消息处理
1.主要用途:未来某时做某事	线程之间的通信


二十九.Android 数据存储	
1.SharedPreferences	轻量级数据存储	是否允许推送,是否是第一次打开,记住用户密码.
	存储形式: XML文件 K-V形式
	SharedPreferences: 对数据进行读的操作
	SharedPreferences.Editor:对数据的读的操作
2.
//        sharedPreferences实例获取     文件的名称,  模式
//        模式MODE_PRIVATE:   只有应用本身可以读写  MODE_APPEND  追加填写,不回去覆盖
        sharedPreferences = getSharedPreferences("date",MODE_PRIVATE);
//      获取editor实例
        editor = sharedPreferences.edit();

                //写入数据
                editor.putString("name",shared_preferences_text_write.getText().toString());
                //需要commit提交    是一个同步存储的过程,必须等待存储完成之后才能继续执行
                //apply 方法 存储的时候是一个异步的过程,会在后台进行执行,在内存上及时生效,磁盘上异步
                editor.apply();

                //读取数据
                shared_preferences_text_show.setText(sharedPreferences.getString("name","未获取到数据"));
3.文件的存储目录
	data/data/<applicationId>/shared_prefs	需要root权限才能看到

三十.Android File 存储 Android 存储概念
1.内部存储Internal Storage <--- Android 存储 ---> 外部存储 External Storage
以前的手机能够插卡存储,手机会内置一块存储,不可更改,为内部存储;外部存储为SD卡.
如今的手机外部存储和内部存储可能已经存储在一起.
内部存储:随着应用的卸载被删除
外部存储:公有目录	私有目录

2.内部存储:sharedPreferences的存储即为内部存储,另外data/data/<applicationId>/databases|files|cache都为内部存储
3.外部存储:有pictures|movies|等公有目录	制作图片管理器,需要获取手机中所有的图片
	Environment.getExternalStoragePublicDirectory(int type)方法获取Inviol
	私有目录 /mnt/sdcard/Android/data/data/<applicationId>/files|cache	根据应用的卸载而删除

三十一.File 内部存储
FileOutPutStream FileInputStream
1.存储数据
    /**
     * 保存数据
     * @param content 需要保存的内容
     */
    private void save(String content) {
        FileOutputStream fileOutputStream = null;
        try {
            //打开文件输出流
            fileOutputStream = openFileOutput("test.txt", MODE_PRIVATE);
            //写入数据
            fileOutputStream.write(content.getBytes());
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            //关闭输出流 fileOutputStream.close();
            if (fileOutputStream != null) {
                try {
                    fileOutputStream.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }

2.获取数据

    /**
     * 读取数据
     *
     * @return 读取到的数据
     */
    private String read() {
        FileInputStream fileInputStream = null;
        try {
            fileInputStream = openFileInput(FILE_NAME);
            byte[] buff = new byte[1024];
            StringBuilder sb = new StringBuilder();
            int len = 0;
            while ((len = fileInputStream.read(buff)) > 0){
                sb.append(new String(buff,0,len));
            }

            return sb.toString();
        } catch (IOException e) {
            e.printStackTrace();
        }finally {
            if(fileInputStream != null){
                try {
                    fileInputStream.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
        return null;
    }

三十二.File外部存储
1.外部存储
    /**
     * 外部存储数据
     * @param content  需要保存的内容
     */
    private void saveOut(String content){
        FileOutputStream fileOutputStream = null;
        try {
            File dir = null;
            //指定文件目录
            dir = new File(Environment.getExternalStorageDirectory(),"skypan");
            //不存在需要新建文件夹
            if(!dir.exists()){
                //只新建一个文件夹 mkdirs 会解析名称 skypan/a/b 则会生成多个文件夹
                dir.mkdir();
            }
            //指定文件
            File file = new File(dir,FILE_NAME);
            //不存在需要新建该文件
            if(!file.exists()){
                file.createNewFile();
            }
            fileOutputStream = new FileOutputStream(file);
            fileOutputStream.write(content.getBytes());
        } catch (IOException e) {
            e.printStackTrace();
        }finally {
            try {
                fileOutputStream.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

2.外部读取
    /**
     * 外部读取
     * @return  读取到的内容
     */
    private String readOut(){
        FileInputStream fileInputStream = null;
        try {
            File file = new File(Environment.getExternalStorageDirectory().getAbsolutePath()+File.separator+"skypan",FILE_NAME);
            fileInputStream = new FileInputStream(file);
            byte[] buff = new byte[1024];
            int len = 0;
            StringBuilder sb = new StringBuilder();
            while ((len = fileInputStream.read(buff)) > 0){
                sb.append(new String(buff,0,len));
            }
            return sb.toString();
        } catch (Exception e) {
            e.printStackTrace();
        }finally {
            if(fileInputStream != null){
                try {
                    fileInputStream.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
        return null;
    }

3.对外部文件操作需要权限
在注册文件中操作
    <!--获取外部文件写入权限-->
    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
6.0之后需要动态的获取权限\
        //动态获取权限
        ActivityCompat.requestPermissions(this, new String[]{
                Manifest.permission.WRITE_EXTERNAL_STORAGE
        }, 1);









	


	

	

	


















	











	







	
	



	


