二. mapper 动态代理方式的crud(Mybatis 接口开发)
原则: 约定优于配置
配置方式:
	abc.xml
		<name>myProject</name>
硬编码方式:
	abc.java
		Configuration conf = new Configuration();
		con.setName();

约定:默认就是myProject



具体的实现步骤:
1.基础环境: mybatis.jar/jdbc.jar. config.xml
2.(不同之处)
	约定的目标:
		省略掉statement(即com.xxxx.xx.selectAll),即根据约定,直接定位出Sql语句
	a.接口中的方法必须遵循以下约定:
		1.方法名和mapper.xml文件中的标签的id值形同
		2.方法的输入参数和mapper.xml文件中标签的 parameterType类型一致
		3.方法的返回值和 mapper.xml文件中标签的resultType类型一致
除了以上约定,要实现 接口中的方法 和 Mapper.xml中SQL标签的一一对应,还需要:
	1.namespace的值,就是 接口的全类名(接口 - mapper.xml 一一对应)



匹配的过程:(约定的过程)
1.根据 接口名 找到 mapper.ml文件(根据的是namespace=接口全类名)
2.根据 接口的方法名 找到 mapper.xml文件中SQL 标签(方法名 = SQL标签的ID值)

以上两点保证: 当我们调用接口中的方法的时候,程序能自动
定位到 某一个mapper.xml 文件中的SQL标签

习惯: SQL映射文件(mapper.xml)和接口放在同一个包中

	UserMapper userMapper = session.getMapper(UserMapper.class);
	User u = new User();
	Department dep = new Department();
	u.setDep(dep);
	List<User> list = userMapper.selectAll(u);

三. MYbatis的优化
1.可以将配置信息 单独放入 config.properties中,然后再动态引入
	<properties resource="config.properties"/>


	<property name="driver" value="${driver}"/>
        <property name="url" value="${url}"/>

2.Mybatis 全局参数的设置
	<settings>
		<setting name="cacheEnabled" value = "fase"/>
	</settings>
3.别名的设置 别名忽略大小写
a.设置单个别名
	<typeAliases>
		<typeAlias type = "com.xxxx.model.User" alias = "student"/> 
	</typeAliases>
b.设置多个别名(批量设置别名)
	<typeAliases>
		<package name="com.xxxx.model"/> 则该包下的所有类的别名都是他的类名,切不区分大小写
	</typeAliases>
同时需要注意Mybatis除了我们自己定义的别名以外,还有其内定义的常见类的别名


四. 事务提交方式
	JDBC:利用JDBC方式处理事务(需要手动 commit rollback close)
	MANAGED: 将事务交由 其他组件去托管(spring ,jobss),默认会关闭连接
	<transactionManager tpe="MANAGED"/>
		<property name = "closeConnection" value = "false"/>
五. 类型处理器(类型转换器)
1.Mybatis自带一些城建的类型处理器
	int-number  string--varchar
2.自定义mybatis类型处理器
	java--数据库(jdbc类型)
实例:
实体类user: boolean sex
		ture -- 男
		false -- 女
表User :  int sex
		1 -- 男
		0 -- 女
自定义类型转换器(boolean -- int )步骤
a.创建转换器:需要实现TypeHandler接口
	阅读源码可发现此接口有一个实现类 BaseTypeHandler因此可继承该实现类进行转换器的配置
b.转换器详解
	java(boolean) -- DB(int)
	ps:PreparedStatement对象
	i:PreparedStatement对象操作参数的位置
	parameter:java值
	jdbcType:jdbc操作的数据库类型
	
	set:
	if(parameter) ps.setInt(i,1);
	else{ps.setInt(i,0)};			也可以给出三目表达式的形式
	
	根据列名修改
	int sexInt = rs.getInt(columnName);
	if(sexNum == 1) return true;
	else return false;

	根据列索引
	int sexInt = rs.getInt(columnIndex);
	if(sexNum == 1) return true;
	else return false;

	根据存储过程修改
	int sexInt = cs.get(columnIndex);
	teturn sexNum == 1?true : false;

 <typeHandlers>
    <typeHandler handler="com.shxt.converter.BooleanAndIntConverter"/>
  </typeHandlers>


c. 修改后查询需要使用resultMap 处理 
1.如果类中属性和表中的字段类型可以合理识别(String -- varchar),则使用retultType,否则使用 resultMpa
2.如果类中属性名和表中的字段名能够合理识别(id -- id) 则使用retultType,否则使用 resultMpa
3.使用resultMap q区分主键与非主键
	主键元素使用<id/> 来定义,非主键元素使用<result/>来定义
	在使用类型转换器的列中,需要显示的定义javaType jdbcType
	<result property="sex" column = "sex" javaType="boolean" jabcType = "INTEGER00/>"
六.#{ } ${ }的比较
1.类型为简单类型(8个基本类型 + String)
a.#{} ${}
#{任意值} 为规范编程,一般要求与所需要输入的列名,属性名保持一致
${value} 其值必须为value  
	select * from user where name = #{name}
	select * from user where name = '${value}'
b. #{}会自动给String 类型加上'' 而 ${} 则原样输出

2.对象类型
相同,其值都必须为属性名

c.可将${}用于动态排序
selecy * from user where dep_id = ${dep_id} order by ${name} desc
selecy * from user where dep_id = 1 order by ${value} desc

<select id="selectByDepIdAndOrderColumn" resultMap="resultUser" parameterType="HashMap">
        select <include refid="userAndDepartment" />
        from user
        left join department
        on department.id = user.dep_id
        where dep_id = #{dep_id}
        order by ${column} desc
</select>

d.#{}可以防止SQL注入


七.运用HashMap和Mysql存储过程查询

mapper.xml --> mapper接口 -->测试方法
	<!-- 通过调用存储过程查询
	statementType 默认为PreparedStatement查询
	若调用存储过程需改为 CALLABLE 指明调用方式为存储过程
	call countByName('小明',@count);
	select @count;
	jdbc中的调用方式如上
	
	在MYbatis中需要补充语法,在外层加入{}
	并需要指定jdbcType
	注意:存储过程在MYBATIS中用MAP(HASHMAP)来传递
	 -->
	<select id="queryCountByNameWithProcedure" statementType="CALLABLE" 
	parameterType="HashMap">
		{
			call countByName(
			#{gName,jdbcType=VARCHAR ,mode=IN},
			#{count,jdbcType=INTEGER ,mode=OUT}
			)
		}
	</select>

	/**
	 * 通过存储过程调用
	 * 存储过程不具备返回值,而是用map接受其返回值
	 * @param map
	 * @return
	 */
	public void queryCountByNameWithProcedure(Map<String,Object> map);

	//int count = mapper.queryCountByNameWithProcedure(map); 这样取不到输出参数
	//获取存储过程的输出参数
	mapper.queryCountByNameWithProcedure(map);
	int count = (int) map.get("count");
	System.out.println(count);
	session.close();
	
	注意:存储过程不具备返回值,而是通过map来接受,运行结果将根据指定的参数名称返回到map中
	用map.get方法获取
	
	jar包问题:某些jar包无法在调用存储过程时识别Tab 空格符号
通过存储过程删除
	<!-- 通过存储过程实现删除 -->
	<delete id="deleteByNameWithProcedure" statementType="CALLABLE" >
		{
			call deleteByName(
				#{gName,jdbcType=VARCHAR,mode=IN}
			)
		}
	</delete>
jdbc方式增删改都需要commit手动
八.jdbcType 和 javaType映射关系
 1 JDBC Type           Java Type  
 2 CHAR                String  
 3 VARCHAR             String  
 4 LONGVARCHAR         String  
 5 NUMERIC             java.math.BigDecimal  
 6 DECIMAL             java.math.BigDecimal  
 7 BIT             　　 boolean  
 8 BOOLEAN             boolean  
 9 TINYINT             byte  
10 SMALLINT            short  
11 INTEGER             int  
12 BIGINT              long  
13 REAL                float  
14 FLOAT               double  
15 DOUBLE              double  
16 BINARY              byte[]  
17 VARBINARY           byte[]  
18 LONGVARBINARY       byte[]  
19 DATE                java.sql.Date  
20 TIME                java.sql.Time  
21 TIMESTAMP           java.sql.Timestamp  
22 CLOB                Clob  
23 BLOB                Blob  
24 ARRAY               Array  
25 DISTINCT            mapping of underlying type  
26 STRUCT              Struct  
27 REF                 Ref  
28 DATALINK            java.net.URL[color=red][/color]  

九.输出参数 resultType
1.简单类型 8个基本类型+String
2.输出参数为实体对象类型

	<!-- 返回参数为Map 
		可以用过别名返回map
		也可以用原jdbc列名返回
	-->
	<select id="selectUserByHsahMap" resultType="HashMap">
		select name 'name0',sex 'sex1'
		from user
	</select>
3.当属性名和字段名不一致时,也可以使用tesultType=HashMap 返回结果则可以顺利对应

十.增加表并返回主键
	<!-- 插入学生,并返回插入主键 -->
	<insert id="insertUser" parameterType="User" useGeneratedKeys="true" keyProperty="id">
		insert into user(name,dep_id,sex) values(#{name},#{dep.id},#{sex})
	</insert>

	mapper.insertUser(u);
	System.out.println("主键为: " + u.getId());

十一.Mybatis动态SQL查询

<if>
	<!-- 动态SQL语句查询1 加入 where 1 = 1 防止 and 语句让程序报错-->
	<select id="queryUseWithSQLTag" parameterType="User" resultMap="resultUser">
		select * from user where 1 = 1
		<if test="name != null and name != ''">
			and name = #{name}
		</if>
		<if test="sex != null">
			and sex = #{sex}
		</if>
	</select>

	第二种处理方式
	
	<!-- 动态SQL语句查询1 -->
	<select id="queryUseWithSQLTag" parameterType="User" resultMap="resultUser">
		<!-- select * from user where 1 = 1 -->
		select * from user
		<where>
			<if test="name != null and name != ''">
			name = #{name}
		</if>
		<if test="sex != null">
			and sex = #{sex}
		</if>
		</where>
		
	</select>

	where标签可智能识别and标签 where会处理语句的第一个and

<foreach>
	<!-- 
		foreach标签可以迭代:数组,对象数组,集合,属性(Grade类 grades(g1,g2,....))
		collection:所需要遍历的集合
		open:迭代开始头
		close:迭代结束尾巴
		item:迭代的别名
		separator:迭代中的元素分隔符
	 -->
	<select id="queryUserWithForeachByGrade" parameterType="Grade" resultMap="resultUser">
		select * from user
		<where>
			<if test="grades != null and grades.size > 0">
			<foreach collection="grades" open="and grade in (" close=")"
			 item="grades" separator=",">
				#{grades}
			</foreach>
			</if>
		</where>
	</select>


	<!-- 通过数组传值动态查询
		数组在test collection中统一交array
		不能传递String[]可以用List代替
	 -->
	<select id="queryUserWithForeachByArray" parameterType="int[]" resultMap="resultUser">
		select * from user
		<where>
			<if test="array != null and array.length > 0">
			<foreach collection="array" open="and grade in (" close=")"
			 item="id" separator=",">
				#{id}
			</foreach>
			</if>
		</where>
	</select>


	<!-- 通过数组传值动态查询
		list在test collection中统一交list
		不能传递String[]可以用List代替
	 -->
	<select id="queryUserWithForeachByList" parameterType="list" resultMap="resultUser">
		select * from user
		<where>
			<if test="list != null and list.size() > 0">
			<foreach collection="list" open="and grade in (" close=")"
			 item="grades" separator=",">
				#{grades}
			</foreach>
			</if>
		</where>
	</select>
	

	<!-- 通过对象数组传值动态查询
		对象数组使用Object[]属性 #{}中需取得的十对象的属性
		list在test collection中统一交list
		不能传递String[]可以用List代替
	 -->
	<select id="queryUserWithForeachByObjectArray" parameterType="Object[]" resultMap="resultUser">
		select * from user
		<where>
			<if test="array != null and array.length > 0">
			<foreach collection="array" open="and id in (" close=")"
			 item="User" separator=",">
				#{User.id}
			</foreach>
			</if>
		</where>
	</select>

SQL片段 不在同一个xml下时需要提供namespace + id
	提取相同或相似代码

	<sql id="selectUser">
		select * from user
	</sql>

	<select id="queryUserWithForeachByObjectArray" parameterType="Object[]" resultMap="resultUser">
		<include refid="selectUser"/>
		<where>
			<if test="array != null and array.length > 0">
			<foreach collection="array" open="and id in (" close=")"
			 item="User" separator=",">
				#{User.id}
			</foreach>
			</if>
		</where>
	</select>
注意:所传递的别名参数无所谓,不会被获取
十二.关联查询
一对一:
a.业务扩展类
	核心:用resultMap指定类的属性 包含 多表查询的所有字段


b.reslutMap
	在USER表中定义department表的属性成员,在resultMap中定义

	一对一的映射:
	规范化写法  一对一映射时,对象成员用association映射,javaType指定该属性的类型
	<resultMap type="User" id="resultUserAndDepartment">
			<!-- 一对一映射时,对象成员用association映射,javaType指定该属性的类型 -->
		<association property="dep" javaType="Department">
			<id column="dep_id" property="id"/>
			<result column="dep_name" property="dep_name"/>
		</association>
	</resultMap>
	<resultMap type="User" id="resultUserAndDepartment">
			<!-- 一对一映射时,对象成员用association映射,javaType指定该属性的类型 -->
		<association property="dep" javaType="Department">
			<id column="dep_id" property="id"/>
			<result column="dep_name" property="dep_name"/>
		</association>
	</resultMap>

	
一对多(多对一,多对多的本质就是一对多的变化)：
	
	一对多,多对一映射可以连级查询

	<resultMap type="StudentClass" id="class_student_map">
		<!-- 主类为班级,因此为一对多关系,用 collection映射
		property="students" 该类的成员属性名     属性类型:JavaType(一对一) 属性的元素类型:ofType
		连级映射配置
		-->
		<id column="class_id" property="class_id"/>
		<result column="class_name" property="class_name"/>
		<collection property="students" ofType="student" >
			<id column="id" property="id"/>
			<result column="name" property="name"/>
			<association property="studentClass" javaType="StudentClass">
				<id column="class_id" property="class_id"/>
				<result column="class_name" property="class_name"/>			
			</association>
		</collection>
	</resultMap>
	<!-- 查询班级的所有学生 -->
	<select id="queryClassAndStudent" resultMap="class_student_map">
		select a.*,b.class_name 
		from student a
		inner join studentclass b
		on a.class_id = b.class_id
	</select>

十二.日志信息的自定义
	常见日志:SLF4J --> Apache Commons Logging --> Log4j 2 --> Log4j --> JDK logging
	使用Log4j  

	a.需要log4j.jar

	b.配置config.xml setting
	<!-- 指定日志 若不指定按以下顺序寻找日志
		SLF4J -> Apache Commons Logging -> Log4j 2 -> Log4j -> JDK logging
		
	 -->
	<settings>
		<setting name="logImpl" value="LOG4J"/>
	</settings>
	
	c.开启日志需要日志输出文件log4j.properties
	log4j.properties
	# Global logging configuration
	log4j.rootLogger=ERROR,stdout
	# MyBatis logging configuration...
	log4j.logger.com.sky.mapper.StudentMapper=DEBUG
	log4j.logger.com.sky.mapper.UserMapper=DEBUG
	# Console output...
	log4j.appender.stdout=org.apache.log4j.ConsoleAppender
	log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
	log4j.appender.stdout.layout.ConversionPattern=%5p [%t] - %m%n

	d.log4j日志级别
	DEBUG<INFO<WARN<ERROR  日志打印只打印该级别及其以上的信息
	建议:开发时使用DEBUG,运行环境INFO及以上信息

十三.延迟加载:
	一对一,一对多........
	一对多:班级-学生
		如果不采用延迟加载(立即加载),查询时会将 一和多都查询,班级,班级中的所有学生
		如果这个班级有100个学生,而我只需要一个,则严重影响运行效率
		如果暂时查询一个,而多的地方,先不查询,需要的时候再去查询 即为延时加载

	一对一延时加载(lazyload):
		需要先配置:
		<setting name="logImpl" value="LOG4J"/>
		
		<!-- 开启延迟加载 -->
		<setting name="lazyLoadingEnabled" value="true"/>
		
		<!-- 关闭立即加载 -->
		<setting name="aggressiveLazyLoading" value="false"/>
		

		<mapper namespace="com.sky.mapper.StudentCardMapper" >
		<select id="queryStudentAndStudentCard" parameterType="int" 
		resultType="StudentCard">
			select *
			from studentcard
			where card_id = #{card_id}
		</select>
		</mapper>

		<resultMap type="Student" id="student_card_map">
		<id column="id" property="id"/>
		<result column="name" property="name"/>
		<!-- 延时加载lazyload 暂时不给我学生信息
				不在内部标签中写 
				写在association 属性中
			 -->
		<association property="studentCard" javaType="StudentCard" 
		select="com.sky.mapper.StudentCardMapper.queryStudentAndStudentCard"
		column="card_id">
			
		</association>
		</resultMap>
		
		<select id="queryAllStudent" resultMap="student_card_map">
		select * from student
		</select>
		
		List<Student> list = mapper.queryAllStudent();
		for(Student student:list) {
			System.out.print(student.getId() + " " + student.getName() + " ");
			student.getStudentCard();
			System.out.print(student.getStudentCard());
			System.out.println();
		}

		使用Debug设置断点则可发现延时加载


十四.Mybatis查询缓存和逆向工程

a.查询缓存(增删改不涉及缓存)
	1.一级缓存: 同一个sqlSession对象
		第一次查找student(name:zs)对象时会将zs放入内存(缓存)----> 一个Sqlsession(session1)对象中
		后续查询zs对象时,不需要再次查询,可以直接从缓存中拿出zs(数据库的打开比较耗费性能)
		一旦提交commit(),将会清理所有的缓存对象
		Mybatis已经默认开启了一级缓存

	2.二级缓存
		Mybatis自带二级缓存:
			同一个namespace生成的mapper对象,则他们共享缓存(NameSpace决定了Mapper对象的产生)
			只要产生的Mapper对象,来自于同一个NameSpace对象,则他们都同属于一个二级缓存(就算不是同一个session对象的也是二级缓存)
			Mybatis未默认开启二级缓存
			开启步骤:
			a.
			<!-- 开启二级缓存 -->
			<setting name="cacheEnable" value="true"/>
			b.在具体的mapper.xml中声明
			<!-- 声明此nameSpace开启二级缓存 -->
			<cache/>

			Mybatis二级缓存是将对象放入硬盘文件中(Error serializing object.)
				序列化:内存 -- 硬盘  	反序列化:硬盘---内存
			准备缓存时,必须实现序列化接口(implements Serializable)
			想要启用二级缓存,需要close(session1)----缓存的时机:
									在close操作的时候,则将其序列化

			参数解释
				DEBUG [main] - Cache Hit Ratio [com.sky.mapper.StudentMapper]: 0.5
			命中率:一共查询了两次,在二级缓存中成功提出一次

			注意:二级缓存的范围是同一个namsSpace


			禁用:
				在标签属性中设置为禁用
				<select id="queryClassAndStudent" resultMap="class_student_map" useCache="false">

			命中率:
				1:  0.0
				2:  0.5
				3:  0.66
				0.  0.75

			清理:与清理一级缓存方法相同 commit();  	需要使用确实执行增删改操作后的commit操作,增加的commit操作;
				 useCache="true" flushCache="true"  标签清理 在select标签中增加属性
		三方提供的二级缓存:
			ehcache  memcache
		要想整合三方提供的二级缓存(或者自定义)需要实现cache接口 其默认实现类为PerpetualCache
		jar包:ehcache-core.jar  mybatis.Ehcache.jar  slf4j-api.jar
		编写ehcache配置文件:Ehcache.xml
		开启Ehcache缓存(二级缓存):关闭Mybatis自带的二级缓存在mapper.xml中的cache
			cache type="org.mybatis.caches.ehcache.EhcacheCache">  可使用ctrl + shift + T查找


b.逆向工程
		student表 studentMapper.xml  StudentMapper.java Student.java 根据其中之一生成其他
		根据student表生成其他三个

		需要:mybatis - generator.jar
		逆向工程的配置文件: generator.xml
		测试运行:main方法
		

	